void if_pipe(t_data *mini_data, int start, int end)
{
    if (mini_data->command_line[end+1] != ' ')
    {
        char *str;

        add_token(&mini_data->tokens_list, "|");
        end++;
        str = ft_substr(mini_data->command_line, start, end-start);
        add_token(&mini_data->tokens_list, str);
    }
}

void if_iqual(t_data *minidata, int start, int end)
{

}

void break_cmd(t_data *mini_data)
{
    int end;
    int start;
    char *str;

    start = 0;
    end = 0;
    while (mini_data->command_line[end] != '\0')
    {
        if(ft_strchr(" |=", mini_data->command_line[end]) != 0 )
        {
            str = ft_substr(mini_data->command_line, start, end-start);
            add_token(&mini_data->tokens_list, str);
            if (mini_data->command_line[end] == '|')
            {
                add_token(&mini_data->tokens_list, "|");
                end++;
            }
            if (mini_data->command_line[end] == '=')
            {
                add_token(&mini_data->tokens_list, "=");
                end++;
            }
            while(mini_data->command_line[end] == ' ')
                end++;
            start = end;
        }
        end++;
    }
    str = ft_substr(mini_data->command_line, start, end-start);
    add_token(&mini_data->tokens_list, str);
    print_tokens(mini_data->tokens_list);
}
---------------------HEREDOC EXP------------------------------------------
static char *search_in_path(char **mini_envp, char *arg)
{
	int count;
	char *exp;
	int count_exp;
	int count_char;

	count_exp = 0;
	count_char = 0;
	exp = NULL;
	count = 0;
	while (mini_envp[count] != NULL)
	{
		if (ft_strncmp(mini_envp[count], arg, ft_strlen(arg)) == 0
		&& mini_envp[count][ft_strlen(arg)] == '=')
		{
			exp = ft_calloc_exit(ft_strlen(mini_envp[count]) - ft_strlen(arg),
								 sizeof(char));
			while (mini_envp[count][count_char] != '=')
				count_char++;
			count_char++;
			while(mini_envp[count][count_char] != '\0')
				exp[count_exp++] = mini_envp[count][count_char++];
			return(exp);
		}
		count++;
	}
	return (ft_strdup(""));
}

void put_exp(const char *str, const char *exp, char **new_str, int count_new)
{
	int count_exp;
	int count_str;

	count_str = 0;
	count_exp = 0;
	while (exp[count_exp] != '\0')
		(*new_str)[count_new++] = exp[count_exp++];
	while (str[count_str] != ' ' && str[count_str] != '\0')
		count_str++;
	while (str[count_str] != '\0')
		(*new_str)[count_new++] = str[count_str++];
}

char *new_str(char *str, char *exp)
{
	char *new_str;
	int count_str;
	int count_new;

	count_new = 0;
	count_str = 0;
	new_str = ft_calloc_exit((ft_strlen(str) + ft_strlen(exp)),
						sizeof (char)); //remover arg
	while (str[count_str] != '\0')
	{
		if(str[count_str] == '$')
		{
			put_exp(str + count_str, exp, &new_str, count_new);
			break;
		}
		if (str[count_str] == '\0')
			break;
		new_str[count_new++] = str[count_str++];
	}
	return (new_str);
}

//TODO fails in case exp is not found or $USER$PATH
char *check_for_exp(char *str, t_data *mini_data)
{
	char *exp_line;
	int count;
	char *arg;
	int start;

	start = 0;
	count = 0;
	exp_line = NULL;
	arg = NULL;
	if (ft_strchr(str, '$') != 0)
	{
		while (str[count] != '\0')
		{
			if (str[count] == '$')
			{
				start = count;
				while (str[count] != ' ' && str[count] != '\0')
					count++;
				arg = ft_substr(str, start + 1, (count - start)-1);
				exp_line = search_in_path(mini_data->mini_envp, arg);
				str = new_str(str, exp_line);
				free(arg);
				free(exp_line);
				return(str);
			}
			count++;
		}
	}
	return (str);
}


//TODO exit code

// if (!isatty(STDIN_FILENO))
//      rl_outstream = stdin;